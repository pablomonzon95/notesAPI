# Query: console.log
# ContextLines: 1

19 results - 9 files

src\server.js:
  82  app.listen(PORT, () => {
  83:   console.log(`Server listening on http://localhost:${PORT}`);
  84  });

src\controllers\notes\createNote.js:
  12  
  13:   
  15  

src\controllers\notes\editNote.js:
  26      }
  27:     
  28  

  43      //Tener en cuenta que si no viene una imagen se debe dejar la imagen anterior (si la hay)
  44:     console.log(req.body)
  45      const updatedNote = { ...note, ...req.body };

src\controllers\notes\getPublicNotes.js:
  11      const notes = await selectPublicNotes();
  12:   
  13  

src\database\initDb.js:
  11  
  12:     console.log("Database created");
  13  
  14:     console.log("Deleting tables...");
  15  

  20  
  21:     console.log("Creating users table...");
  22  

  32  
  33:     console.log("Creating categories table...");
  34  

  41  
  42:     console.log("Creating notes table...");
  43  

  61  
  62:     console.log("Â¡All done!ðŸŒ ");
  63    } catch (error) {

src\database\populateDb.js:
  12      `);
  13:     console.log("Inserting users...");
  14  

  23  
  24:     console.log("Inserting categories...");
  25      await pool.query(`INSERT INTO categories (name) VALUES ('otras'),
  26  ('hogar'),('escuela'),('deportes')`);
  27:     console.log("Inserting notes...");
  28  

  43  
  44:     console.log("Â¡All done! ðŸ¤—");
  45    } catch (error) {

src\repositories\categories\selecNotesByCategoryId.js:
   9    );
  10:   
  11    return notes;

src\repositories\notes\editNoteById.js:
  6  
  7:  
  8  

src\repositories\users\selectUserById.js:
  5    const [[user]] = await pool.query("SELECT * FROM users WHERE id = ?", [id]);
  6:   
  7    return user;
